<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Messenger</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            height: 100vh;
            overflow: hidden;
            position: relative;
        }
        
        /* VİDEO ARKA PLANI */
        #video-background {
            position: fixed;
            right: 0;
            bottom: 0;
            min-width: 100%;
            min-height: 100%;
            width: auto;
            height: auto;
            z-index: -100;
            background-size: cover;
            filter: brightness(0.75) contrast(1.1); 
        }

        /* DİL VE BAĞLANTI ÇUBUĞU (ŞEFFAF FOOTBAR) */
        .top-footbar {
            position: absolute;
            bottom: 0; 
            left: 0;
            width: 100%;
            background: transparent; /* Tamamen şeffaf yapıldı */
            border-top: none; /* Kenarlık kaldırıldı */
            padding: 8px 0 10px 0; 
            box-shadow: none; /* Gölge kaldırıldı */
            z-index: 5; 
            font-size: 0.8rem;
        }

        .top-footbar-content {
            display: flex;
            flex-direction: column; 
            justify-content: center;
            align-items: center; 
            max-width: 1000px;
            margin: 0 auto;
            padding: 0 15px;
            text-align: center;
        }

        .language-links, .meta-links {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            margin-bottom: 5px;
        }

        /* Bağlantı renkleri beyaz/açık ton yapıldı */
        .language-links a, .meta-links a {
            color: #ffffffcc; /* Daha belirgin açık renk */
            text-decoration: none;
            margin: 0 7px; 
            padding: 0 2px;
            white-space: nowrap;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.8); /* Arka plan videosu üzerinde okunurluk için gölge eklendi */
        }

        .language-links {
            padding-right: 0; 
            border-right: none;
        }

        .meta-links {
            margin-left: 0; 
            border-top: 1px solid #ffffff33; /* Hafif şeffaf beyaz ayraç */
            padding-top: 5px;
        }
        
        /* AUTH CONTAINER (DAHA YUKARI ALINDI) */
        .auth-container {
            width: 100vw;
            min-height: 100vh;
            background: rgba(255, 255, 255, 0.1); 
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start; 
            padding-top: 10vh; /* YENİ, DAHA YÜKSEK KONUM */
            overflow-x: hidden;
            position: relative;
            padding-bottom: 60px; 
        }

        /* SHINE EFEKTİ (MAKSİMUM GÜÇ) */
        .shine {
            position: absolute;
            top: 5vh; /* Logonun hemen üstünden başlaması için daha yukarı çekildi */
            left: 10vw;
            right: 10vw;
            height: 420px;
            z-index: -2; 
            /* Parlaklığı maksimize edilmiş renk */
            background: radial-gradient(circle at 50% 50%, #e0f7ffcc 0%, #f1faff00 80%); 
            filter: blur(80px); /* Maksimum bulanıklık ve yayılma */
            opacity: 1;
            animation: shineAnim 7s ease-in-out infinite alternate;
        }

        @keyframes shineAnim {
            0% {
                background-position: 45% 60%;
                opacity: 0.95;
            }
            100% {
                background-position: 55% 40%;
                opacity: 1;
            }
        }

        .auth-center {
            display: flex;
            flex-direction: column;
            align-items: center;
            z-index: 1;
            width: 100%;
            transform: none; 
        }

        .messenger-logo-row {
            display: flex;
            align-items: center;
            gap: 13px;
            margin-bottom: 24px;
            justify-content: center;
            margin-top: 0; 
            z-index: 5;
        }

        .logo-ava {
            width: 54px;
            height: 54px;
        }

        .messenger-logo {
            font-size: 2.5rem;
            font-family: 'Segoe UI', Verdana, Geneva, sans-serif;
            color: #fff; 
            text-shadow: 1px 1px 0 #1977f3, 1px 2px 2px #00000080; 
            font-weight: bold;
            letter-spacing: 1px;
        }

        .auth-box {
            background: rgba(255, 255, 255, 0.2); 
            border-radius: 14px;
            box-shadow: 0 4px 32px -8px #1977f33a, 0 2px 0 #ffffff1a inset;
            padding: 30px 34px 30px 32px;
            display: flex;
            flex-direction: row;
            gap: 40px;
            align-items: center;
            max-width: 660px;
            backdrop-filter: blur(2px); 
        }

        .auth-info {
            max-width: 270px;
            min-width: 150px;
        }

        .auth-info h2 {
            color: #fff; 
            text-shadow: 1px 1px 2px #00000077;
            margin-bottom: 14px;
            font-size: 1.34rem;
        }

        .slogan-list {
            margin: 0 0 0 4px;
            padding: 0;
            list-style: none;
        }

        .slogan-list li {
            margin-bottom: 10px;
            color: #fff; 
            text-shadow: 1px 1px 2px #00000077;
            font-size: 1.03rem;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .slogan-list li span {
            font-size: 1.16em;
        }

        /* FORM SADELEŞTİRİLDİ */
        .auth-form {
            width: 250px;
            box-sizing: border-box;
            gap: 16px;
            padding: 18px 20px 14px 20px;
            background: rgba(255, 255, 255, 0.4); 
            border-radius: 12px;
            border: 1px solid #aaa;
            display: flex;
            flex-direction: column;
            box-shadow: 0 2px 18px -8px #9fc9e2a0, 0 1px 0 #ffffff40 inset;
            backdrop-filter: blur(5px); 
        }

        .form-group {
            margin-bottom: 10px;
        }

        .textbar-group {
            position: relative;
            display: flex;
            align-items: center;
            margin-bottom: 0px; 
        }

        .textbar-input {
            width: 100%;
            height: 42px;
            padding-left: 2.8rem;
            padding-right: 1rem;
            border-radius: 8px;
            border: 1.8px solid #3b5998;
            background: linear-gradient(to bottom, #f7fbff, #dbe6f0);
            color: #1a2849;
            font-size: 1rem;
            box-shadow: inset 0 2px 4px rgba(255, 255, 255, 0.8), 0 2px 6px rgba(0, 0, 0, 0.05);
            outline: none;
            transition: border-color 0.3s ease, box-shadow 0.3s ease, background 0.3s ease;
        }

        .textbar-input:focus {
            border-color: #1977f3;
            background: #ffffff;
            box-shadow: inset 0 2px 4px rgba(255, 255, 255, 0.9), 0 0 10px 3px rgba(25, 119, 243, 0.5);
        }

        .textbar-input::placeholder {
            color: #a0aabc;
        }

        /* KULLANICI İKONU */
        .textbar-icon {
            position: absolute;
            left: 0.9rem;
            fill: #4267b2;
            width: 1.25rem;
            height: 1.25rem;
            pointer-events: none;
            opacity: 0.8;
        }

        .btn {
            position: relative;
            cursor: pointer;
            padding: 7px 8px;
            border: 1px solid black;
            border-radius: 4px;
            color: #fff;
            text-shadow: 1px 1px #000;
            box-shadow: inset 0px 4px 4px -3px #fff0, inset 0px -3px 4px -3px #fff;
            background: linear-gradient(#ddd, #999 50%, #000 50%);
            isolation: isolate;
            transition: 0.25s all, 0.1s background-position;
            font-size: 1rem;
            width: 100%;
            margin-top: 6px;
        }

        .btn::after {
            content: "";
            position: absolute;
            z-index: -1;
            inset: 0;
            background: radial-gradient(circle at 50% 150%, #48b9ef, #0000 50%);
            background-size: 300% 50%;
            background-position: 50% 100%;
            background-repeat: no-repeat;
            opacity: 0;
            transition: inherit;
        }

        .btn::before {
            content: "";
            position: absolute;
            z-index: -1;
            inset: 0;
            background: radial-gradient(circle at 50% 320%, #48b9ef, #0000 50%);
            background-size: 300% 50%;
            background-position: 50% 0%;
            background-repeat: no-repeat;
            opacity: 0;
            transition: inherit;
        }

        .btn:hover {
            box-shadow: inset 0px 4px 4px -3px #fff5, inset 0px -3px 4px -3px #fff;
        }

        .btn:hover::before,
        .btn:hover::after {
            opacity: 1;
        }

        .btn:active::before,
        .btn:active::after {
            opacity: 0;
        }

        .btn:active {
            box-shadow: inset 0px 4px 4px -3px #000, inset 0px -4px 4px -3px #000c, inset 0px 0px 24px -3px #000a;
            background-position: 1px 1px;
        }

        .btn div {
            transition: 0.1s translate;
        }

        .btn:active div {
            translate: 1px 1px;
        }

        .btn.register {
            margin-top: 0;
            background: linear-gradient(#7ad7f0, #3b80fe 60%, #1569e3 100%);
            border: none;
            color: #fff;
            font-weight: bold;
            text-shadow: 1px 1px #3184b7;
        }

        .btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

        .error {
            color: #ffdddd; 
            background: #d13438;
            padding: 5px;
            border-radius: 4px;
            margin-bottom: 15px;
            font-size: 14px;
        }
        
        /* AYRAÇ STİLİ */
        .divider {
            margin: 16px 0 6px 0;
            height: 1px;
            background: linear-gradient(90deg, #bbbbbb66 30%, #ffffff66 100%);
            border: none;
        }


        @media (max-width: 750px) {
            .auth-container {
                padding-top: 10vh; 
            }
            .auth-box {
                flex-direction: column;
                padding: 22px 18px;
                gap: 18px;
            }
            .auth-form {
                width: 100%;
                min-width: 180px;
            }
        }

        /* ... (Uygulama arayüzü CSS kodları devam ediyor) ... */
        .app-container {
            display: none;
            height: 100vh;
            background: #f0f0f0;
        }

        .app-header {
            background: #0078d4;
            color: white;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .app-header h1 {
            font-size: 20px;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .logout-btn {
            background: #006abc;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        .logout-btn:hover {
            background: #005a9e;
        }

        .main-content {
            display: flex;
            height: calc(100vh - 60px);
        }

        .sidebar {
            width: 320px;
            background: white;
            border-right: 1px solid #ddd;
            display: flex;
            flex-direction: column;
        }

        .sidebar-header {
            padding: 15px;
            border-bottom: 1px solid #ddd;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .sidebar-header h2 {
            font-size: 18px;
            color: #333;
        }

        .new-chat-btn {
            background: #0078d4;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        .conversations-list {
            flex: 1;
            overflow-y: auto;
        }

        .conversation-item {
            padding: 15px;
            border-bottom: 1px solid #f0f0f0;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .conversation-item:hover {
            background: #f5f5f5;
        }

        .conversation-item.active {
            background: #e3f2fd;
        }

        .conversation-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #0078d4;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            flex-shrink: 0;
        }

        .conversation-info {
            flex: 1;
            min-width: 0;
        }

        .conversation-name {
            font-weight: 500;
            color: #333;
            margin-bottom: 3px;
        }

        .conversation-preview {
            font-size: 13px;
            color: #666;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .conversation-badge {
            background: #0078d4;
            color: white;
            border-radius: 12px;
            padding: 2px 8px;
            font-size: 12px;
            font-weight: 500;
        }

        .chat-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: #e5e5e5;
        }

        .chat-header {
            background: white;
            padding: 15px 20px;
            border-bottom: 1px solid #ddd;
        }

        .chat-header h3 {
            font-size: 18px;
            color: #333;
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
        }

        .message {
            margin-bottom: 15px;
            display: flex;
            gap: 10px;
        }

        .message.sent {
            flex-direction: row-reverse;
        }

        .message-bubble {
            max-width: 60%;
            padding: 10px 15px;
            border-radius: 18px;
            word-wrap: break-word;
        }

        .message.received .message-bubble {
            background: white;
            color: #333;
        }

        .message.sent .message-bubble {
            background: #0078d4;
            color: white;
        }

        .message-time {
            font-size: 11px;
            color: #999;
            margin-top: 5px;
        }

        .chat-input {
            background: white;
            padding: 15px 20px;
            border-top: 1px solid #ddd;
            display: flex;
            gap: 10px;
        }

        .chat-input input {
            flex: 1;
            padding: 10px 15px;
            border: 1px solid #ccc;
            border-radius: 20px;
            font-size: 14px;
        }

        .chat-input input:focus {
            outline: none;
            border-color: #0078d4;
        }

        .send-btn {
            background: #0078d4;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 20px;
            cursor: pointer;
            font-weight: 500;
        }

        .send-btn:hover {
            background: #006abc;
        }

        .send-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

        .empty-state {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            color: #999;
            font-size: 18px;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .modal-content {
            background: white;
            padding: 30px;
            border-radius: 8px;
            width: 400px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            margin-bottom: 20px;
        }

        .modal-header h2 {
            font-size: 22px;
            color: #333;
        }

        .user-list-item {
            padding: 12px;
            border-bottom: 1px solid #f0f0f0;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .user-list-item:hover {
            background: #f5f5f5;
        }

        .status-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: #ccc;
        }

        .status-indicator.online {
            background: #00c853;
        }

        .close-modal {
            float: right;
            font-size: 28px;
            font-weight: bold;
            color: #999;
            cursor: pointer;
        }

        .close-modal:hover {
            color: #333;
        }
    </style>
</head>
<body>
    
    <video autoplay="" muted="" loop="" id="video-background">
        <source src="f.mp4" type="video/mp4">
        Your browser does not support HTML5 video.
    </video>

    
    <div id="authContainer" class="auth-container">
        <div class="shine"></div>
        <div class="auth-center">
            
            <div class="messenger-logo-row">
                <!-- <svg viewBox="0 0 40 40" class="logo-ava"> -->
                    <!-- <defs> -->
                        <!-- <radialGradient id="avaGlow" cx="50%" cy="60%" r="85%"> -->
                            <!-- <stop offset="0%" stop-color="#48b9ef"></stop> -->
                            <!-- <stop offset="80%" stop-color="#1977f355"></stop> -->
                            <!-- <stop offset="100%" stop-color="#dde8f600"></stop> -->
                        <!-- </radialGradient> -->
                    <!-- </defs> -->
                    <!-- <circle cx="20" cy="20" r="18" fill="url(#avaGlow)"></circle> -->
                    <!-- <ellipse cx="20" cy="15" rx="7" ry="7" fill="#fff"></ellipse> -->
                    <!-- <ellipse cx="20" cy="26.4" rx="12" ry="7.2" fill="#fff" fill-opacity="0.8"></ellipse> -->
                <!-- </svg> -->
                <div class="messenger-logo">freely</div>
            </div>
            
            <div class="auth-box">
                <div class="auth-info">
		<p>
        <li> anlık mesajlaşma, gecikmesiz sesli ve görüntülü görüşme.</li><br>
        <li> uçtan uca şifreleme ile gizliliğini koru.</li><br>
        <li> yüksek çözünürlüklü fotoğraf ve belge paylaşımı yap.</li><br>
        <li> özelleştirilebilir temalar ve emoji tepkileri ile kendini ifade et.</li>
		</p>
                </div>
                <div id="loginForm" class="auth-form">
                    <div id="authError" class="error" style="display: none;"></div>
                    <div class="textbar-group">
                        <svg class="textbar-icon" aria-hidden="true" viewBox="0 0 24 24">
                            <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"></path>
                        </svg>
                        <input type="text" id="loginUsername" placeholder="e-posta" class="textbar-input" autocomplete="username">
                    </div>
                    <button class="btn" onclick="login()"><div>giriş yap</div></button>
                    
                    <div class="divider"></div>
                    <button class="btn register" onclick="alert('Registration feature is not yet active.')"><div>kaydol</div></button>
                </div>

                <div id="registerForm" class="auth-form" style="display: none;"></div>
            </div>
        </div>
    </div>

    <div id="appContainer" class="app-container">
        <div class="app-header">
            <h1>Messenger</h1>
            <div class="user-info">
                <span id="currentUserName"></span>
                <button class="logout-btn" onclick="logout()">Logout</button>
            </div>
        </div>
        <div class="main-content">
            <div class="sidebar">
                <div class="sidebar-header">
                    <h2>Conversations</h2>
                    <button class="new-chat-btn" onclick="showNewChatModal()">+ New</button>
                </div>
                <div id="conversationsList" class="conversations-list"></div>
            </div>
            <div class="chat-area">
                <div id="emptyState" class="empty-state">
                    Select a conversation to start messaging
                </div>
                <div id="chatContainer" style="display: none; flex: 1; display: flex; flex-direction: column;">
                    <div class="chat-header">
                        <h3 id="chatHeaderName"></h3>
                    </div>
                    <div id="chatMessages" class="chat-messages"></div>
                    <div class="chat-input">
                        <input type="text" id="messageInput" placeholder="Type a message..." onkeypress="handleMessageKeyPress(event)">
                        <button class="send-btn" onclick="sendMessage()">Send</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="newChatModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close-modal" onclick="closeNewChatModal()">×</span>
                <h2>New Conversation</h2>
            </div>
            <div id="usersList"></div>
        </div>
    </div>

    <div class="top-footbar">
        <div class="top-footbar-content">
            <div class="language-links">
                <a href="#">English (US)</a>
                <a href="#">Español</a>
                <a href="#">Português (Brasil)</a>
                <a href="#">Français (France)</a>
                <a href="#">Deutsch</a>
                <a href="#">Italiano</a>
                <a href="#">العربية</a>
                <a href="#">हिन्दी</a>
                <a href="#">中文(简体)</a>
                <a href="#">日本語</a>
                <a href="#">...</a>
            </div>
            <div class="meta-links">
                <a href="#">About</a>
                <a href="#">Advertising</a>
                <a href="#">Privacy</a>
                <a href="#">Terms</a>
                <a href="#">Help</a>
            </div>
        </div>
    </div>

    <script>
        let currentUser = null;
        let activeConversationId = null;
        let pollInterval = null;

        /* SADECE KULLANICI ADI İLE GİRİŞ YAPILACAK ŞEKİLDE DÜZELTİLDİ */
        async function login() {
            const username = document.getElementById('loginUsername').value;
            const errorDiv = document.getElementById('authError');

            if (!username) {
                errorDiv.textContent = 'e-posta girmedin';
                errorDiv.style.display = 'block';
                return;
            }

            // Şifre göndermeden API'ye istek yapılıyor
            try {
                const response = await fetch('/api/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include',
                    // Sadece kullanıcı adını gönderiyoruz (API'nizin şifresiz giriş için bunu kabul ettiğini varsayıyoruz)
                    body: JSON.stringify({ username: username, password: "" }) 
                });

                if (response.ok) {
                    currentUser = await response.json();
                    showApp();
                } else {
                    const error = await response.json();
                    errorDiv.textContent = error.error || 'Login failed. Check username.';
                    errorDiv.style.display = 'block';
                }
            } catch (error) {
                errorDiv.textContent = 'Connection error. Please try again.';
                errorDiv.style.display = 'block';
            }
        }

        // --- APP FONKSİYONLARI DEĞİŞMEDEN KALDI ---
        async function logout() {
            await fetch('/api/logout', {
                method: 'POST',
                credentials: 'include'
            });
            stopPolling();
            currentUser = null;
            activeConversationId = null;
            document.getElementById('authContainer').style.display = 'flex';
            document.getElementById('appContainer').style.display = 'none';
        }

        function showApp() {
            document.getElementById('authContainer').style.display = 'none';
            document.getElementById('appContainer').style.display = 'block';
            document.getElementById('currentUserName').textContent = currentUser.display_name || currentUser.username;
            loadConversations();
            startPolling();
        }

        async function loadConversations() {
            try {
                const response = await fetch('/api/conversations', {
                    credentials: 'include'
                });
                const conversations = await response.json();
                renderConversations(conversations);
            } catch (error) {
                console.error('Failed to load conversations:', error);
            }
        }

        function renderConversations(conversations) {
            const list = document.getElementById('conversationsList');
            if (conversations.length === 0) {
                list.innerHTML = '<div style="padding: 20px; text-align: center; color: #999;">No conversations yet. Click "+ New" to start chatting!</div>';
                return;
            }

            list.innerHTML = conversations.map(conv => `
                <div class="conversation-item ${conv.id === activeConversationId ? 'active' : ''}" onclick="openConversation(${conv.id})">
                    <div class="conversation-avatar">${(conv.display_name || conv.username).charAt(0).toUpperCase()}</div>
                    <div class="conversation-info">
                        <div class="conversation-name">${conv.display_name || conv.username}</div>
                        <div class="conversation-preview">${conv.last_message || 'No messages yet'}</div>
                    </div>
                    ${conv.unread_count > 0 ? `<div class="conversation-badge">${conv.unread_count}</div>` : ''}
                </div>
            `).join('');
        }

        async function openConversation(userId) {
            activeConversationId = userId;
            loadConversations();
            
            try {
                const [messagesResponse, usersResponse] = await Promise.all([
                    fetch(`/api/messages/${userId}`, { credentials: 'include' }),
                    fetch('/api/users', { credentials: 'include' })
                ]);
                
                const messages = await messagesResponse.json();
                const users = await usersResponse.json();
                const user = users.find(u => u.id === userId);
                
                document.getElementById('emptyState').style.display = 'none';
                document.getElementById('chatContainer').style.display = 'flex';
                document.getElementById('chatHeaderName').textContent = user.display_name || user.username;
                
                renderMessages(messages);
            } catch (error) {
                console.error('Failed to load messages:', error);
            }
        }

        function renderMessages(messages) {
            const container = document.getElementById('chatMessages');
            container.innerHTML = messages.map(msg => {
                const isSent = msg.sender_id === currentUser.id;
                const time = new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                return `
                    <div class="message ${isSent ? 'sent' : 'received'}">
                        <div class="message-bubble">
                            ${msg.content}
                            <div class="message-time">${time}</div>
                        </div>
                    </div>
                `;
            }).join('');
            container.scrollTop = container.scrollHeight;
        }

        async function sendMessage() {
            const input = document.getElementById('messageInput');
            const content = input.value.trim();
            
            if (!content || !activeConversationId) return;
            
            try {
                await fetch('/api/messages', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include',
                    body: JSON.stringify({
                        recipient_id: activeConversationId,
                        content: content
                    })
                });
                
                input.value = '';
                openConversation(activeConversationId);
            } catch (error) {
                console.error('Failed to send message:', error);
            }
        }

        function handleMessageKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }

        async function showNewChatModal() {
            try {
                const response = await fetch('/api/users', {
                    credentials: 'include'
                });
                const users = await response.json();
                
                const list = document.getElementById('usersList');
                list.innerHTML = users.map(user => `
                    <div class="user-list-item" onclick="startNewConversation(${user.id})">
                        <div class="conversation-avatar">${(user.display_name || user.username).charAt(0).toUpperCase()}</div>
                        <div class="conversation-info">
                            <div class="conversation-name">${user.display_name || user.username}</div>
                            <div class="conversation-preview">@${user.username}</div>
                        </div>
                        <div class="status-indicator ${user.status === 'online' ? 'online' : ''}"></div>
                    </div>
                `).join('');
                
                document.getElementById('newChatModal').style.display = 'flex';
            } catch (error) {
                console.error('Failed to load users:', error);
            }
        }

        function closeNewChatModal() {
            document.getElementById('newChatModal').style.display = 'none';
        }

        function startNewConversation(userId) {
            closeNewChatModal();
            openConversation(userId);
        }

        function startPolling() {
            if (pollInterval) return;
            pollInterval = setInterval(() => {
                loadConversations();
                if (activeConversationId) {
                    fetch(`/api/messages/${activeConversationId}`, { credentials: 'include' })
                        .then(r => r.json())
                        .then(messages => renderMessages(messages))
                        .catch(err => console.error('Polling error:', err));
                }
            }, 2000);
        }

        function stopPolling() {
            if (pollInterval) {
                clearInterval(pollInterval);
                pollInterval = null;
            }
        }

        async function checkAuth() {
            try {
                const response = await fetch('/api/me', {
                    credentials: 'include'
                });
                if (response.ok) {
                    currentUser = await response.json();
                    showApp();
                }
            } catch (error) {
                console.log('Not authenticated');
            }
        }

        checkAuth();
    </script>


</body>
</html>